Estimated time
20-30 minutes

Level of difficulty
Medium

Prerequisites
LAB 4.3.1.6
LAB 4.3.1.7

Objectives
Familiarize the student with:

projecting and writing parameterized functions;
utilizing the return statement;
building a set of utility functions;
utilizing the student's own functions.
Scenario
Your task is to write and test a function which takes three arguments (a year, a month, and a day of the month) and returns the corresponding day of the year, or returns None if any of the arguments is invalid.

Use the previously written and tested functions. Add some test cases to the code. This test is only a beginning


#####################################################################################################################################

def is_year_leap(year):
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

def days_in_month(year, month):
    if month == 2:
        if is_year_leap(year) == True:
            return 29
        else:
            return 28
    
    elif month in [4, 6, 9, 11]:
        return 30
    else:
        return 31
    

def day_of_year(year, month, day):
    if year is None or month is None or day is None:
        return None
    
    
    non_leap_year_days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    leap_year_days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    
    if is_year_leap(year) == True:
        previous_months_days = sum(leap_year_days_in_month[:month-1])
        total = previous_months_days + day
        return total
    
    else:
        previous_months_days = sum(non_leap_year_days_in_month[:month-1])
        total = previous_months_days + day
        return total


print(day_of_year(2000, 12, 31))
