#The Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.

def levenshtein_distance(s1, s2):
    """
    Calculates the Levenshtein distance between two strings.

    The Levenshtein distance is a metric for measuring the difference between
    two sequences. It is the minimum number of single-character edits
    (insertions, deletions or substitutions) required to change one word
    into the other.

    Args:
    s1 (str): The first string.
    s2 (str): The second string.

    Returns:
    int: The Levenshtein distance between s1 and s2.
    """

    len_s1 = len(s1)
    len_s2 = len(s2)

    # Create a 2D array (matrix) to store the distances
    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]
    print(dp)

    # Initialize the first row and first column
    for i in range(len_s1 + 1):
        dp[i][0] = i
    for j in range(len_s2 + 1):
        dp[0][j] = j

    # Fill the DP table
    for i in range(1, len_s1 + 1):
        for j in range(1, len_s2 + 1):
            if s1[i - 1] == s2[j - 1]:
                cost = 0
            else:
                cost = 1

            dp[i][j] = min(dp[i - 1][j] + 1,          # Deletion
                           dp[i][j - 1] + 1,          # Insertion
                           dp[i - 1][j - 1] + cost)   # Substitution

    return dp[len_s1][len_s2]


print(levenshtein_distance("dog","cat"))
