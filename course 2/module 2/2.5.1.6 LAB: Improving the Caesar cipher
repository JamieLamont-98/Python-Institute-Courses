Estimated time
30-90 minutes

Level of difficulty
Hard

Pre-requisites
Module 1.11.1.1, Module 1.11.1.2

Objectives
improving the student's skills in operating with strings;
converting characters into ASCII code, and vice versa.
Scenario
You are already familiar with the Caesar cipher, and this is why we want you to improve the code we showed you recently.

The original Caesar cipher shifts each character by one: a becomes b, z becomes a, and so on. Let's make it a bit harder, and allow the shifted value to come from the range 1..25 inclusive.

Moreover, let the code preserve the letters' case (lower-case letters will remain lower-case) and all non-alphabetical characters should remain untouched.

Your task is to write a program which:

asks the user for one line of text to encrypt;
asks the user for a shift value (an integer number from the range 1..25 - note: you should force the user to enter a valid shift value (don't give up and don't let bad data fool you!)
prints out the encoded text.
Test your code using the data we've provided.

Test data
Sample input:

abcxyzABCxyz 123
2

Sample output:

cdezabCDEzab 123

Sample input:

The die is cast
25

Sample output:

Sgd chd hr bzrs











////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







"""
This code implements a Caeser cipher, a simple substitution where each letter
in the plaintext is replaced by a letter some fixed number of positions down the alphabet
"""

def caesar_cypher_input():
    text = input("Enter your secret message here: ")
    
    while True:
        try:
            shift_value = int(input("Enter a shift value between 1 and 25: "))
            if 1<= shift_value <=25:
                break
            
            else:
                print("Error that value is not between 1 and 25")
    
        
        except:
            print("Error: Invalid input. Please enter a whole number.")

    cipher = ''

    for char in text:
    
        if not char.isalpha():
            cipher += char
    
        elif 65 <= ord(char) <=90:
            original_position = ord(char) - ord('A')
            shifted_position = (original_position +shift_value) %26
            new_position = shifted_position + ord('A')
            cipher += chr(new_position)
 
        elif 97 <= ord(char) <=122:
            original_position = ord(char) - ord('a')
            shifted_position = (original_position +shift_value) %26
            new_position = shifted_position + ord('a')
            cipher += chr(new_position)       



    print(cipher)




def caesar_cypher_extractor():
    text = (input("Enter your secret cypher: "))
        
    while True:
        try:
            shift_value = int(input("Enter the shift value for your secret cypher: "))
            if 1<= shift_value <=25:
                break
            
            else:
                print("Error that value is not between 1 and 25")
    
        
        except:
            print("Error: Invalid input. Please enter a whole number.")
    
    cipher = ''
    
    for char in text:
    
        if not char.isalpha():
            cipher += char
    
        elif 65 <= ord(char) <=90:
            new_position = ord(char) - ord('A')
            pre_shifted_position = (new_position - shift_value +26) %26
            original_position = pre_shifted_position + ord('A')
            cipher += chr(original_position)
 
 
 
        elif 97 <= ord(char) <=122:
            new_position = ord(char) - ord('a')
            pre_shifted_position = (new_position - shift_value +26) %26
            original_position = pre_shifted_position + ord('a')
            cipher += chr(original_position)     
    
    print(cipher)




while True:
    while True:
        game_status = input("do you require a cypher service: yes/no. ").lower()
        if game_status == "yes" or game_status == "no":
            break
        else:
            print("you have entered an invalid answer")
    
    if game_status == "no":
        print("No cypher service needed.")
        break
    
    if game_status == "yes":
        while True:
            cypher_choice = input("Which service do you require: encrypt/decrypt or exit. ").lower()
            if cypher_choice == "encrypt" or cypher_choice == "decrypt":
                break
            elif cypher_choice == "exit":
                print("Exiting cypher service selection")
                break
            else:
                print("You have entered an invalid input.")
    
    if cypher_choice == "exit":
        print("No cypher service needed.")
        break
    
    if cypher_choice == "encrypt":
        caesar_cypher_input()
    
    elif cypher_choice == "decrypt":
        caesar_cypher_extractor()
        

